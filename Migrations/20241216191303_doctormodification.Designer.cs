// <auto-generated />
using System;
using E_Vita;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Vita.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241216191303_doctormodification")]
    partial class doctormodification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("E_Vita.Models.Appointment", b =>
                {
                    b.Property<int>("Doctor_ID")
                        .HasColumnType("int");

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Doctor_ID", "Patient_ID");

                    b.HasIndex("Patient_ID");

                    b.ToTable("Appointments_DB");
                });

            modelBuilder.Entity("E_Vita.Models.Doctor", b =>
                {
                    b.Property<int>("Doctor_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Doctor_ID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("E_Vita.Models.Medical_Record", b =>
                {
                    b.Property<int>("Record_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Family_History")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Future_Plan")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<string>("Surgery")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Record_ID");

                    b.HasIndex("Patient_ID");

                    b.ToTable("Medical_Records");
                });

            modelBuilder.Entity("E_Vita.Models.Nurse", b =>
                {
                    b.Property<int>("Nurse_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Doctor_ID")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("user_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Nurse_ID");

                    b.HasIndex("Doctor_ID");

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("E_Vita.Models.Patient", b =>
                {
                    b.Property<int>("Patient_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Birth_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Patient_ID");

                    b.ToTable("patient_Datas");
                });

            modelBuilder.Entity("E_Vita.Models.Patient_Doctor_Nurse", b =>
                {
                    b.Property<int>("Nurse_ID")
                        .HasColumnType("int");

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<int>("Doctor_ID")
                        .HasColumnType("int");

                    b.HasKey("Nurse_ID", "Patient_ID", "Doctor_ID");

                    b.HasIndex("Doctor_ID");

                    b.HasIndex("Patient_ID");

                    b.ToTable("patient_Doctor_Nurses");
                });

            modelBuilder.Entity("E_Vita.Models.Prescription", b =>
                {
                    b.Property<int>("Prescription_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Dosage")
                        .HasColumnType("int");

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.HasKey("Prescription_ID");

                    b.HasIndex("Patient_ID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("E_Vita.Models.Reset_Pass_Log", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Admin_Pass")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("New_Pass")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("User_Name")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("User_Name");

                    b.ToTable("Reset_Pass_Logs");
                });

            modelBuilder.Entity("E_Vita.Models.Appointment", b =>
                {
                    b.HasOne("E_Vita.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("Doctor_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita.Models.Medical_Record", b =>
                {
                    b.HasOne("E_Vita.Models.Patient", "patient_id")
                        .WithMany()
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient_id");
                });

            modelBuilder.Entity("E_Vita.Models.Nurse", b =>
                {
                    b.HasOne("E_Vita.Models.Doctor", "doctor_id")
                        .WithMany()
                        .HasForeignKey("Doctor_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor_id");
                });

            modelBuilder.Entity("E_Vita.Models.Patient_Doctor_Nurse", b =>
                {
                    b.HasOne("E_Vita.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("Doctor_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("Nurse_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Vita.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_Vita.Models.Prescription", b =>
                {
                    b.HasOne("E_Vita.Models.Patient", "patient_id")
                        .WithMany()
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient_id");
                });

            modelBuilder.Entity("E_Vita.Models.Reset_Pass_Log", b =>
                {
                    b.HasOne("E_Vita.Models.Doctor", "user_name")
                        .WithMany()
                        .HasForeignKey("User_Name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user_name");
                });

            modelBuilder.Entity("E_Vita.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("E_Vita.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
